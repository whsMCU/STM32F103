
stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001e5c  08001e5c  00002e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e8c  08001e8c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e8c  08001e8c  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e8c  08001e8c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e8c  08001e8c  00002e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e90  08001e90  00002e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e94  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08001ea0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001ea0  0000308c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000c2b7  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000061  00000000  00000000  0000f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00007b91  00000000  00000000  0000f34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018d3  00000000  00000000  00016ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000998  00000000  00000000  000187b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008c482  00000000  00000000  00019150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000075d  00000000  00000000  000a55d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001732b  00000000  00000000  000a5d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bd05a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026e8  00000000  00000000  000bd0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e44 	.word	0x08001e44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e44 	.word	0x08001e44

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800014c:	f001 fb98 	bl	8001880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000150:	480b      	ldr	r0, [pc, #44]	@ (8000180 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000152:	490c      	ldr	r1, [pc, #48]	@ (8000184 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000154:	4a0c      	ldr	r2, [pc, #48]	@ (8000188 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000158:	e002      	b.n	8000160 <LoopCopyDataInit>

0800015a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800015a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800015c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800015e:	3304      	adds	r3, #4

08000160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000164:	d3f9      	bcc.n	800015a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000166:	4a09      	ldr	r2, [pc, #36]	@ (800018c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000168:	4c09      	ldr	r4, [pc, #36]	@ (8000190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800016a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800016c:	e001      	b.n	8000172 <LoopFillZerobss>

0800016e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800016e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000170:	3204      	adds	r2, #4

08000172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000174:	d3fb      	bcc.n	800016e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 fe41 	bl	8001dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f001 fdcf 	bl	8001d1c <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r0, =_sdata
 8000180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000184:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000188:	08001e94 	.word	0x08001e94
  ldr r2, =_sbss
 800018c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000190:	2000008c 	.word	0x2000008c

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	4b08      	ldr	r3, [pc, #32]	@ (80001c0 <HAL_Init+0x28>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a07      	ldr	r2, [pc, #28]	@ (80001c0 <HAL_Init+0x28>)
 80001a2:	f043 0310 	orr.w	r3, r3, #16
 80001a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a8:	2003      	movs	r0, #3
 80001aa:	f000 f947 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ae:	200f      	movs	r0, #15
 80001b0:	f000 f808 	bl	80001c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001b4:	f001 fafc 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001b8:	2300      	movs	r3, #0
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40022000 	.word	0x40022000

080001c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001cc:	4b12      	ldr	r3, [pc, #72]	@ (8000218 <HAL_InitTick+0x54>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b12      	ldr	r3, [pc, #72]	@ (800021c <HAL_InitTick+0x58>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	4619      	mov	r1, r3
 80001d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001da:	fbb3 f3f1 	udiv	r3, r3, r1
 80001de:	fbb2 f3f3 	udiv	r3, r2, r3
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f95f 	bl	80004a6 <HAL_SYSTICK_Config>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e00e      	b.n	8000210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b0f      	cmp	r3, #15
 80001f6:	d80a      	bhi.n	800020e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f8:	2200      	movs	r2, #0
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000200:	f000 f927 	bl	8000452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000204:	4a06      	ldr	r2, [pc, #24]	@ (8000220 <HAL_InitTick+0x5c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800020a:	2300      	movs	r3, #0
 800020c:	e000      	b.n	8000210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800020e:	2301      	movs	r3, #1
}
 8000210:	4618      	mov	r0, r3
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20000008 	.word	0x20000008
 800021c:	20000004 	.word	0x20000004
 8000220:	20000000 	.word	0x20000000

08000224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000228:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <HAL_IncTick+0x1c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	461a      	mov	r2, r3
 800022e:	4b05      	ldr	r3, [pc, #20]	@ (8000244 <HAL_IncTick+0x20>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4413      	add	r3, r2
 8000234:	4a03      	ldr	r2, [pc, #12]	@ (8000244 <HAL_IncTick+0x20>)
 8000236:	6013      	str	r3, [r2, #0]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	20000004 	.word	0x20000004
 8000244:	20000028 	.word	0x20000028

08000248 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  return uwTick;
 800024c:	4b02      	ldr	r3, [pc, #8]	@ (8000258 <HAL_GetTick+0x10>)
 800024e:	681b      	ldr	r3, [r3, #0]
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000028 	.word	0x20000028

0800025c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000264:	f7ff fff0 	bl	8000248 <HAL_GetTick>
 8000268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000274:	d005      	beq.n	8000282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000276:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <HAL_Delay+0x44>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	461a      	mov	r2, r3
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4413      	add	r3, r2
 8000280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000282:	bf00      	nop
 8000284:	f7ff ffe0 	bl	8000248 <HAL_GetTick>
 8000288:	4602      	mov	r2, r0
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	429a      	cmp	r2, r3
 8000292:	d8f7      	bhi.n	8000284 <HAL_Delay+0x28>
  {
  }
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000004 	.word	0x20000004

080002a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f003 0307 	and.w	r3, r3, #7
 80002b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	68ba      	ldr	r2, [r7, #8]
 80002bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d6:	4a04      	ldr	r2, [pc, #16]	@ (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	60d3      	str	r3, [r2, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	@ (8000304 <__NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	2b00      	cmp	r3, #0
 8000318:	db0b      	blt.n	8000332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	f003 021f 	and.w	r2, r3, #31
 8000320:	4906      	ldr	r1, [pc, #24]	@ (800033c <__NVIC_EnableIRQ+0x34>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	095b      	lsrs	r3, r3, #5
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f202 	lsl.w	r2, r0, r2
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100

08000340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	6039      	str	r1, [r7, #0]
 800034a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db0a      	blt.n	800036a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	490c      	ldr	r1, [pc, #48]	@ (800038c <__NVIC_SetPriority+0x4c>)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000368:	e00a      	b.n	8000380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4908      	ldr	r1, [pc, #32]	@ (8000390 <__NVIC_SetPriority+0x50>)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	f003 030f 	and.w	r3, r3, #15
 8000376:	3b04      	subs	r3, #4
 8000378:	0112      	lsls	r2, r2, #4
 800037a:	b2d2      	uxtb	r2, r2
 800037c:	440b      	add	r3, r1
 800037e:	761a      	strb	r2, [r3, #24]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000e100 	.word	0xe000e100
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000394:	b480      	push	{r7}
 8000396:	b089      	sub	sp, #36	@ 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f003 0307 	and.w	r3, r3, #7
 80003a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	f1c3 0307 	rsb	r3, r3, #7
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	bf28      	it	cs
 80003b2:	2304      	movcs	r3, #4
 80003b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	3304      	adds	r3, #4
 80003ba:	2b06      	cmp	r3, #6
 80003bc:	d902      	bls.n	80003c4 <NVIC_EncodePriority+0x30>
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3b03      	subs	r3, #3
 80003c2:	e000      	b.n	80003c6 <NVIC_EncodePriority+0x32>
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295
 80003cc:	69bb      	ldr	r3, [r7, #24]
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	43da      	mvns	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	401a      	ands	r2, r3
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003dc:	f04f 31ff 	mov.w	r1, #4294967295
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43d9      	mvns	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	4313      	orrs	r3, r2
         );
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3724      	adds	r7, #36	@ 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	@ (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ff90 	bl	8000340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff2d 	bl	80002a4 <__NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff42 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ff90 	bl	8000394 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5f 	bl	8000340 <__NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff35 	bl	8000308 <__NVIC_EnableIRQ>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff ffa2 	bl	80003f8 <SysTick_Config>
 80004b4:	4603      	mov	r3, r0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b08b      	sub	sp, #44	@ 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004d2:	e169      	b.n	80007a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80004d4:	2201      	movs	r2, #1
 80004d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	69fa      	ldr	r2, [r7, #28]
 80004e4:	4013      	ands	r3, r2
 80004e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004e8:	69ba      	ldr	r2, [r7, #24]
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	f040 8158 	bne.w	80007a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	4a9a      	ldr	r2, [pc, #616]	@ (8000760 <HAL_GPIO_Init+0x2a0>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d05e      	beq.n	80005ba <HAL_GPIO_Init+0xfa>
 80004fc:	4a98      	ldr	r2, [pc, #608]	@ (8000760 <HAL_GPIO_Init+0x2a0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d875      	bhi.n	80005ee <HAL_GPIO_Init+0x12e>
 8000502:	4a98      	ldr	r2, [pc, #608]	@ (8000764 <HAL_GPIO_Init+0x2a4>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d058      	beq.n	80005ba <HAL_GPIO_Init+0xfa>
 8000508:	4a96      	ldr	r2, [pc, #600]	@ (8000764 <HAL_GPIO_Init+0x2a4>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d86f      	bhi.n	80005ee <HAL_GPIO_Init+0x12e>
 800050e:	4a96      	ldr	r2, [pc, #600]	@ (8000768 <HAL_GPIO_Init+0x2a8>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d052      	beq.n	80005ba <HAL_GPIO_Init+0xfa>
 8000514:	4a94      	ldr	r2, [pc, #592]	@ (8000768 <HAL_GPIO_Init+0x2a8>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d869      	bhi.n	80005ee <HAL_GPIO_Init+0x12e>
 800051a:	4a94      	ldr	r2, [pc, #592]	@ (800076c <HAL_GPIO_Init+0x2ac>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d04c      	beq.n	80005ba <HAL_GPIO_Init+0xfa>
 8000520:	4a92      	ldr	r2, [pc, #584]	@ (800076c <HAL_GPIO_Init+0x2ac>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d863      	bhi.n	80005ee <HAL_GPIO_Init+0x12e>
 8000526:	4a92      	ldr	r2, [pc, #584]	@ (8000770 <HAL_GPIO_Init+0x2b0>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d046      	beq.n	80005ba <HAL_GPIO_Init+0xfa>
 800052c:	4a90      	ldr	r2, [pc, #576]	@ (8000770 <HAL_GPIO_Init+0x2b0>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d85d      	bhi.n	80005ee <HAL_GPIO_Init+0x12e>
 8000532:	2b12      	cmp	r3, #18
 8000534:	d82a      	bhi.n	800058c <HAL_GPIO_Init+0xcc>
 8000536:	2b12      	cmp	r3, #18
 8000538:	d859      	bhi.n	80005ee <HAL_GPIO_Init+0x12e>
 800053a:	a201      	add	r2, pc, #4	@ (adr r2, 8000540 <HAL_GPIO_Init+0x80>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	080005bb 	.word	0x080005bb
 8000544:	08000595 	.word	0x08000595
 8000548:	080005a7 	.word	0x080005a7
 800054c:	080005e9 	.word	0x080005e9
 8000550:	080005ef 	.word	0x080005ef
 8000554:	080005ef 	.word	0x080005ef
 8000558:	080005ef 	.word	0x080005ef
 800055c:	080005ef 	.word	0x080005ef
 8000560:	080005ef 	.word	0x080005ef
 8000564:	080005ef 	.word	0x080005ef
 8000568:	080005ef 	.word	0x080005ef
 800056c:	080005ef 	.word	0x080005ef
 8000570:	080005ef 	.word	0x080005ef
 8000574:	080005ef 	.word	0x080005ef
 8000578:	080005ef 	.word	0x080005ef
 800057c:	080005ef 	.word	0x080005ef
 8000580:	080005ef 	.word	0x080005ef
 8000584:	0800059d 	.word	0x0800059d
 8000588:	080005b1 	.word	0x080005b1
 800058c:	4a79      	ldr	r2, [pc, #484]	@ (8000774 <HAL_GPIO_Init+0x2b4>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000592:	e02c      	b.n	80005ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	623b      	str	r3, [r7, #32]
          break;
 800059a:	e029      	b.n	80005f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	3304      	adds	r3, #4
 80005a2:	623b      	str	r3, [r7, #32]
          break;
 80005a4:	e024      	b.n	80005f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	3308      	adds	r3, #8
 80005ac:	623b      	str	r3, [r7, #32]
          break;
 80005ae:	e01f      	b.n	80005f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	330c      	adds	r3, #12
 80005b6:	623b      	str	r3, [r7, #32]
          break;
 80005b8:	e01a      	b.n	80005f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d102      	bne.n	80005c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005c2:	2304      	movs	r3, #4
 80005c4:	623b      	str	r3, [r7, #32]
          break;
 80005c6:	e013      	b.n	80005f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d105      	bne.n	80005dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005d0:	2308      	movs	r3, #8
 80005d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	69fa      	ldr	r2, [r7, #28]
 80005d8:	611a      	str	r2, [r3, #16]
          break;
 80005da:	e009      	b.n	80005f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005dc:	2308      	movs	r3, #8
 80005de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	615a      	str	r2, [r3, #20]
          break;
 80005e6:	e003      	b.n	80005f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
          break;
 80005ec:	e000      	b.n	80005f0 <HAL_GPIO_Init+0x130>
          break;
 80005ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	2bff      	cmp	r3, #255	@ 0xff
 80005f4:	d801      	bhi.n	80005fa <HAL_GPIO_Init+0x13a>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	e001      	b.n	80005fe <HAL_GPIO_Init+0x13e>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3304      	adds	r3, #4
 80005fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	2bff      	cmp	r3, #255	@ 0xff
 8000604:	d802      	bhi.n	800060c <HAL_GPIO_Init+0x14c>
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	e002      	b.n	8000612 <HAL_GPIO_Init+0x152>
 800060c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800060e:	3b08      	subs	r3, #8
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	210f      	movs	r1, #15
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	fa01 f303 	lsl.w	r3, r1, r3
 8000620:	43db      	mvns	r3, r3
 8000622:	401a      	ands	r2, r3
 8000624:	6a39      	ldr	r1, [r7, #32]
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	431a      	orrs	r2, r3
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063a:	2b00      	cmp	r3, #0
 800063c:	f000 80b1 	beq.w	80007a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000640:	4b4d      	ldr	r3, [pc, #308]	@ (8000778 <HAL_GPIO_Init+0x2b8>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a4c      	ldr	r2, [pc, #304]	@ (8000778 <HAL_GPIO_Init+0x2b8>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b4a      	ldr	r3, [pc, #296]	@ (8000778 <HAL_GPIO_Init+0x2b8>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000658:	4a48      	ldr	r2, [pc, #288]	@ (800077c <HAL_GPIO_Init+0x2bc>)
 800065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	3302      	adds	r3, #2
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	220f      	movs	r2, #15
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	43db      	mvns	r3, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4013      	ands	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a40      	ldr	r2, [pc, #256]	@ (8000780 <HAL_GPIO_Init+0x2c0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d013      	beq.n	80006ac <HAL_GPIO_Init+0x1ec>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a3f      	ldr	r2, [pc, #252]	@ (8000784 <HAL_GPIO_Init+0x2c4>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d00d      	beq.n	80006a8 <HAL_GPIO_Init+0x1e8>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a3e      	ldr	r2, [pc, #248]	@ (8000788 <HAL_GPIO_Init+0x2c8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d007      	beq.n	80006a4 <HAL_GPIO_Init+0x1e4>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a3d      	ldr	r2, [pc, #244]	@ (800078c <HAL_GPIO_Init+0x2cc>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d101      	bne.n	80006a0 <HAL_GPIO_Init+0x1e0>
 800069c:	2303      	movs	r3, #3
 800069e:	e006      	b.n	80006ae <HAL_GPIO_Init+0x1ee>
 80006a0:	2304      	movs	r3, #4
 80006a2:	e004      	b.n	80006ae <HAL_GPIO_Init+0x1ee>
 80006a4:	2302      	movs	r3, #2
 80006a6:	e002      	b.n	80006ae <HAL_GPIO_Init+0x1ee>
 80006a8:	2301      	movs	r3, #1
 80006aa:	e000      	b.n	80006ae <HAL_GPIO_Init+0x1ee>
 80006ac:	2300      	movs	r3, #0
 80006ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006b0:	f002 0203 	and.w	r2, r2, #3
 80006b4:	0092      	lsls	r2, r2, #2
 80006b6:	4093      	lsls	r3, r2
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80006be:	492f      	ldr	r1, [pc, #188]	@ (800077c <HAL_GPIO_Init+0x2bc>)
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	089b      	lsrs	r3, r3, #2
 80006c4:	3302      	adds	r3, #2
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	492c      	ldr	r1, [pc, #176]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
 80006e4:	e006      	b.n	80006f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4928      	ldr	r1, [pc, #160]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 80006f0:	4013      	ands	r3, r2
 80006f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000702:	68da      	ldr	r2, [r3, #12]
 8000704:	4922      	ldr	r1, [pc, #136]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	4313      	orrs	r3, r2
 800070a:	60cb      	str	r3, [r1, #12]
 800070c:	e006      	b.n	800071c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000710:	68da      	ldr	r2, [r3, #12]
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	43db      	mvns	r3, r3
 8000716:	491e      	ldr	r1, [pc, #120]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000718:	4013      	ands	r3, r2
 800071a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	4918      	ldr	r1, [pc, #96]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	4313      	orrs	r3, r2
 8000732:	604b      	str	r3, [r1, #4]
 8000734:	e006      	b.n	8000744 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	43db      	mvns	r3, r3
 800073e:	4914      	ldr	r1, [pc, #80]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000740:	4013      	ands	r3, r2
 8000742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800074c:	2b00      	cmp	r3, #0
 800074e:	d021      	beq.n	8000794 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	490e      	ldr	r1, [pc, #56]	@ (8000790 <HAL_GPIO_Init+0x2d0>)
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	4313      	orrs	r3, r2
 800075a:	600b      	str	r3, [r1, #0]
 800075c:	e021      	b.n	80007a2 <HAL_GPIO_Init+0x2e2>
 800075e:	bf00      	nop
 8000760:	10320000 	.word	0x10320000
 8000764:	10310000 	.word	0x10310000
 8000768:	10220000 	.word	0x10220000
 800076c:	10210000 	.word	0x10210000
 8000770:	10120000 	.word	0x10120000
 8000774:	10110000 	.word	0x10110000
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	40010800 	.word	0x40010800
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40011000 	.word	0x40011000
 800078c:	40011400 	.word	0x40011400
 8000790:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <HAL_GPIO_Init+0x304>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	43db      	mvns	r3, r3
 800079c:	4909      	ldr	r1, [pc, #36]	@ (80007c4 <HAL_GPIO_Init+0x304>)
 800079e:	4013      	ands	r3, r2
 80007a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	3301      	adds	r3, #1
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ae:	fa22 f303 	lsr.w	r3, r2, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f47f ae8e 	bne.w	80004d4 <HAL_GPIO_Init+0x14>
  }
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	372c      	adds	r7, #44	@ 0x2c
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40010400 	.word	0x40010400

080007c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	807b      	strh	r3, [r7, #2]
 80007d4:	4613      	mov	r3, r2
 80007d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007d8:	787b      	ldrb	r3, [r7, #1]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007de:	887a      	ldrh	r2, [r7, #2]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80007e4:	e003      	b.n	80007ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	041a      	lsls	r2, r3, #16
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	611a      	str	r2, [r3, #16]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800080a:	887a      	ldrh	r2, [r7, #2]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4013      	ands	r3, r2
 8000810:	041a      	lsls	r2, r3, #16
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	43d9      	mvns	r1, r3
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	400b      	ands	r3, r1
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	611a      	str	r2, [r3, #16]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e272      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	f000 8087 	beq.w	800095a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800084c:	4b92      	ldr	r3, [pc, #584]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f003 030c 	and.w	r3, r3, #12
 8000854:	2b04      	cmp	r3, #4
 8000856:	d00c      	beq.n	8000872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000858:	4b8f      	ldr	r3, [pc, #572]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 030c 	and.w	r3, r3, #12
 8000860:	2b08      	cmp	r3, #8
 8000862:	d112      	bne.n	800088a <HAL_RCC_OscConfig+0x5e>
 8000864:	4b8c      	ldr	r3, [pc, #560]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800086c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000870:	d10b      	bne.n	800088a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000872:	4b89      	ldr	r3, [pc, #548]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d06c      	beq.n	8000958 <HAL_RCC_OscConfig+0x12c>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d168      	bne.n	8000958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e24c      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000892:	d106      	bne.n	80008a2 <HAL_RCC_OscConfig+0x76>
 8000894:	4b80      	ldr	r3, [pc, #512]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a7f      	ldr	r2, [pc, #508]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 800089a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e02e      	b.n	8000900 <HAL_RCC_OscConfig+0xd4>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10c      	bne.n	80008c4 <HAL_RCC_OscConfig+0x98>
 80008aa:	4b7b      	ldr	r3, [pc, #492]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a7a      	ldr	r2, [pc, #488]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	4b78      	ldr	r3, [pc, #480]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a77      	ldr	r2, [pc, #476]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e01d      	b.n	8000900 <HAL_RCC_OscConfig+0xd4>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80008cc:	d10c      	bne.n	80008e8 <HAL_RCC_OscConfig+0xbc>
 80008ce:	4b72      	ldr	r3, [pc, #456]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a71      	ldr	r2, [pc, #452]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b6f      	ldr	r3, [pc, #444]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a6e      	ldr	r2, [pc, #440]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e00b      	b.n	8000900 <HAL_RCC_OscConfig+0xd4>
 80008e8:	4b6b      	ldr	r3, [pc, #428]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a6a      	ldr	r2, [pc, #424]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b68      	ldr	r3, [pc, #416]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a67      	ldr	r2, [pc, #412]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80008fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d013      	beq.n	8000930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000908:	f7ff fc9e 	bl	8000248 <HAL_GetTick>
 800090c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090e:	e008      	b.n	8000922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000910:	f7ff fc9a 	bl	8000248 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	2b64      	cmp	r3, #100	@ 0x64
 800091c:	d901      	bls.n	8000922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800091e:	2303      	movs	r3, #3
 8000920:	e200      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000922:	4b5d      	ldr	r3, [pc, #372]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0f0      	beq.n	8000910 <HAL_RCC_OscConfig+0xe4>
 800092e:	e014      	b.n	800095a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000930:	f7ff fc8a 	bl	8000248 <HAL_GetTick>
 8000934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000936:	e008      	b.n	800094a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000938:	f7ff fc86 	bl	8000248 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b64      	cmp	r3, #100	@ 0x64
 8000944:	d901      	bls.n	800094a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e1ec      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094a:	4b53      	ldr	r3, [pc, #332]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f0      	bne.n	8000938 <HAL_RCC_OscConfig+0x10c>
 8000956:	e000      	b.n	800095a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d063      	beq.n	8000a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000966:	4b4c      	ldr	r3, [pc, #304]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 030c 	and.w	r3, r3, #12
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00b      	beq.n	800098a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b08      	cmp	r3, #8
 800097c:	d11c      	bne.n	80009b8 <HAL_RCC_OscConfig+0x18c>
 800097e:	4b46      	ldr	r3, [pc, #280]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d116      	bne.n	80009b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800098a:	4b43      	ldr	r3, [pc, #268]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <HAL_RCC_OscConfig+0x176>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d001      	beq.n	80009a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e1c0      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	4939      	ldr	r1, [pc, #228]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80009b2:	4313      	orrs	r3, r2
 80009b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b6:	e03a      	b.n	8000a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d020      	beq.n	8000a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <HAL_RCC_OscConfig+0x270>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009c6:	f7ff fc3f 	bl	8000248 <HAL_GetTick>
 80009ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009cc:	e008      	b.n	80009e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fc3b 	bl	8000248 <HAL_GetTick>
 80009d2:	4602      	mov	r2, r0
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d901      	bls.n	80009e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009dc:	2303      	movs	r3, #3
 80009de:	e1a1      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f0      	beq.n	80009ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4927      	ldr	r1, [pc, #156]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	600b      	str	r3, [r1, #0]
 8000a00:	e015      	b.n	8000a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a02:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <HAL_RCC_OscConfig+0x270>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a08:	f7ff fc1e 	bl	8000248 <HAL_GetTick>
 8000a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a0e:	e008      	b.n	8000a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a10:	f7ff fc1a 	bl	8000248 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d901      	bls.n	8000a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e180      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f0      	bne.n	8000a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d03a      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d019      	beq.n	8000a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_RCC_OscConfig+0x274>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a48:	f7ff fbfe 	bl	8000248 <HAL_GetTick>
 8000a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4e:	e008      	b.n	8000a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a50:	f7ff fbfa 	bl	8000248 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d901      	bls.n	8000a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e160      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <HAL_RCC_OscConfig+0x26c>)
 8000a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f0      	beq.n	8000a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fa9c 	bl	8000fac <RCC_Delay>
 8000a74:	e01c      	b.n	8000ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_RCC_OscConfig+0x274>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a7c:	f7ff fbe4 	bl	8000248 <HAL_GetTick>
 8000a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a82:	e00f      	b.n	8000aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a84:	f7ff fbe0 	bl	8000248 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d908      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a92:	2303      	movs	r3, #3
 8000a94:	e146      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	42420000 	.word	0x42420000
 8000aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa4:	4b92      	ldr	r3, [pc, #584]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1e9      	bne.n	8000a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f000 80a6 	beq.w	8000c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ac2:	4b8b      	ldr	r3, [pc, #556]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10d      	bne.n	8000aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b88      	ldr	r3, [pc, #544]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a87      	ldr	r2, [pc, #540]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b85      	ldr	r3, [pc, #532]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aea:	4b82      	ldr	r3, [pc, #520]	@ (8000cf4 <HAL_RCC_OscConfig+0x4c8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d118      	bne.n	8000b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000af6:	4b7f      	ldr	r3, [pc, #508]	@ (8000cf4 <HAL_RCC_OscConfig+0x4c8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a7e      	ldr	r2, [pc, #504]	@ (8000cf4 <HAL_RCC_OscConfig+0x4c8>)
 8000afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b02:	f7ff fba1 	bl	8000248 <HAL_GetTick>
 8000b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b08:	e008      	b.n	8000b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b0a:	f7ff fb9d 	bl	8000248 <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	2b64      	cmp	r3, #100	@ 0x64
 8000b16:	d901      	bls.n	8000b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e103      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1c:	4b75      	ldr	r3, [pc, #468]	@ (8000cf4 <HAL_RCC_OscConfig+0x4c8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f0      	beq.n	8000b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d106      	bne.n	8000b3e <HAL_RCC_OscConfig+0x312>
 8000b30:	4b6f      	ldr	r3, [pc, #444]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a6e      	ldr	r2, [pc, #440]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6213      	str	r3, [r2, #32]
 8000b3c:	e02d      	b.n	8000b9a <HAL_RCC_OscConfig+0x36e>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10c      	bne.n	8000b60 <HAL_RCC_OscConfig+0x334>
 8000b46:	4b6a      	ldr	r3, [pc, #424]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	4a69      	ldr	r2, [pc, #420]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	6213      	str	r3, [r2, #32]
 8000b52:	4b67      	ldr	r3, [pc, #412]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	4a66      	ldr	r2, [pc, #408]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b58:	f023 0304 	bic.w	r3, r3, #4
 8000b5c:	6213      	str	r3, [r2, #32]
 8000b5e:	e01c      	b.n	8000b9a <HAL_RCC_OscConfig+0x36e>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d10c      	bne.n	8000b82 <HAL_RCC_OscConfig+0x356>
 8000b68:	4b61      	ldr	r3, [pc, #388]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	4a60      	ldr	r2, [pc, #384]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6213      	str	r3, [r2, #32]
 8000b74:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	4a5d      	ldr	r2, [pc, #372]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6213      	str	r3, [r2, #32]
 8000b80:	e00b      	b.n	8000b9a <HAL_RCC_OscConfig+0x36e>
 8000b82:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	4a5a      	ldr	r2, [pc, #360]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	6213      	str	r3, [r2, #32]
 8000b8e:	4b58      	ldr	r3, [pc, #352]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	4a57      	ldr	r2, [pc, #348]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000b94:	f023 0304 	bic.w	r3, r3, #4
 8000b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d015      	beq.n	8000bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba2:	f7ff fb51 	bl	8000248 <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba8:	e00a      	b.n	8000bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000baa:	f7ff fb4d 	bl	8000248 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d901      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e0b1      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0ee      	beq.n	8000baa <HAL_RCC_OscConfig+0x37e>
 8000bcc:	e014      	b.n	8000bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bce:	f7ff fb3b 	bl	8000248 <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd4:	e00a      	b.n	8000bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bd6:	f7ff fb37 	bl	8000248 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d901      	bls.n	8000bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e09b      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bec:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1ee      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a3b      	ldr	r2, [pc, #236]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 8087 	beq.w	8000d22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c14:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d061      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d146      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c28:	4b33      	ldr	r3, [pc, #204]	@ (8000cf8 <HAL_RCC_OscConfig+0x4cc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fb0b 	bl	8000248 <HAL_GetTick>
 8000c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c34:	e008      	b.n	8000c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c36:	f7ff fb07 	bl	8000248 <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d901      	bls.n	8000c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e06d      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c48:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f0      	bne.n	8000c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c5c:	d108      	bne.n	8000c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c5e:	4b24      	ldr	r3, [pc, #144]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	4921      	ldr	r1, [pc, #132]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c70:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a19      	ldr	r1, [r3, #32]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c80:	430b      	orrs	r3, r1
 8000c82:	491b      	ldr	r1, [pc, #108]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000c84:	4313      	orrs	r3, r2
 8000c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_RCC_OscConfig+0x4cc>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fadb 	bl	8000248 <HAL_GetTick>
 8000c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c94:	e008      	b.n	8000ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c96:	f7ff fad7 	bl	8000248 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d901      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e03d      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f0      	beq.n	8000c96 <HAL_RCC_OscConfig+0x46a>
 8000cb4:	e035      	b.n	8000d22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_RCC_OscConfig+0x4cc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fac4 	bl	8000248 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cc4:	f7ff fac0 	bl	8000248 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e026      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_RCC_OscConfig+0x4c4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x498>
 8000ce2:	e01e      	b.n	8000d22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d107      	bne.n	8000cfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e019      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40007000 	.word	0x40007000
 8000cf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_RCC_OscConfig+0x500>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d106      	bne.n	8000d1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e0d0      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d44:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d910      	bls.n	8000d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d52:	4b67      	ldr	r3, [pc, #412]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 0207 	bic.w	r2, r3, #7
 8000d5a:	4965      	ldr	r1, [pc, #404]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d62:	4b63      	ldr	r3, [pc, #396]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d001      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e0b8      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d020      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d8c:	4b59      	ldr	r3, [pc, #356]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a58      	ldr	r2, [pc, #352]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000d96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d005      	beq.n	8000db0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000da4:	4b53      	ldr	r3, [pc, #332]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a52      	ldr	r2, [pc, #328]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000daa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000dae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db0:	4b50      	ldr	r3, [pc, #320]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	494d      	ldr	r1, [pc, #308]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d040      	beq.n	8000e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d107      	bne.n	8000de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	4b47      	ldr	r3, [pc, #284]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d115      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e07f      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d107      	bne.n	8000dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dee:	4b41      	ldr	r3, [pc, #260]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d109      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e073      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e06b      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e0e:	4b39      	ldr	r3, [pc, #228]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f023 0203 	bic.w	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	4936      	ldr	r1, [pc, #216]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e20:	f7ff fa12 	bl	8000248 <HAL_GetTick>
 8000e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e26:	e00a      	b.n	8000e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e28:	f7ff fa0e 	bl	8000248 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e053      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 020c 	and.w	r2, r3, #12
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d1eb      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d210      	bcs.n	8000e80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 0207 	bic.w	r2, r3, #7
 8000e66:	4922      	ldr	r1, [pc, #136]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d001      	beq.n	8000e80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e032      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d008      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	4916      	ldr	r1, [pc, #88]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d009      	beq.n	8000ebe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	490e      	ldr	r1, [pc, #56]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ebe:	f000 f821 	bl	8000f04 <HAL_RCC_GetSysClockFreq>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	490a      	ldr	r1, [pc, #40]	@ (8000ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8000ed0:	5ccb      	ldrb	r3, [r1, r3]
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	4a09      	ldr	r2, [pc, #36]	@ (8000efc <HAL_RCC_ClockConfig+0x1cc>)
 8000ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_RCC_ClockConfig+0x1d0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f970 	bl	80001c4 <HAL_InitTick>

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40022000 	.word	0x40022000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	08001e70 	.word	0x08001e70
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000

08000f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <HAL_RCC_GetSysClockFreq+0x94>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d002      	beq.n	8000f34 <HAL_RCC_GetSysClockFreq+0x30>
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d003      	beq.n	8000f3a <HAL_RCC_GetSysClockFreq+0x36>
 8000f32:	e027      	b.n	8000f84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8000f36:	613b      	str	r3, [r7, #16]
      break;
 8000f38:	e027      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	0c9b      	lsrs	r3, r3, #18
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
 8000f46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d010      	beq.n	8000f74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_RCC_GetSysClockFreq+0x94>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	0c5b      	lsrs	r3, r3, #17
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8000f66:	fb03 f202 	mul.w	r2, r3, r2
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e004      	b.n	8000f7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	613b      	str	r3, [r7, #16]
      break;
 8000f82:	e002      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8000f86:	613b      	str	r3, [r7, #16]
      break;
 8000f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f8a:	693b      	ldr	r3, [r7, #16]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	007a1200 	.word	0x007a1200
 8000fa0:	08001e5c 	.word	0x08001e5c
 8000fa4:	08001e6c 	.word	0x08001e6c
 8000fa8:	003d0900 	.word	0x003d0900

08000fac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <RCC_Delay+0x34>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <RCC_Delay+0x38>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0a5b      	lsrs	r3, r3, #9
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fc8:	bf00      	nop
  }
  while (Delay --);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	60fa      	str	r2, [r7, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f9      	bne.n	8000fc8 <RCC_Delay+0x1c>
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	10624dd3 	.word	0x10624dd3

08000fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e041      	b.n	800107e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fe5e 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3304      	adds	r3, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4610      	mov	r0, r2
 8001028:	f000 f9d6 	bl	80013d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d001      	beq.n	80010a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e03a      	b.n	8001116 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <HAL_TIM_Base_Start_IT+0x98>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00e      	beq.n	80010e0 <HAL_TIM_Base_Start_IT+0x58>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ca:	d009      	beq.n	80010e0 <HAL_TIM_Base_Start_IT+0x58>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <HAL_TIM_Base_Start_IT+0x9c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d004      	beq.n	80010e0 <HAL_TIM_Base_Start_IT+0x58>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <HAL_TIM_Base_Start_IT+0xa0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d111      	bne.n	8001104 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d010      	beq.n	8001114 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0201 	orr.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001102:	e007      	b.n	8001114 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40012c00 	.word	0x40012c00
 8001124:	40000400 	.word	0x40000400
 8001128:	40000800 	.word	0x40000800

0800112c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d020      	beq.n	8001190 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01b      	beq.n	8001190 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f06f 0202 	mvn.w	r2, #2
 8001160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f913 	bl	80013a2 <HAL_TIM_IC_CaptureCallback>
 800117c:	e005      	b.n	800118a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f906 	bl	8001390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f915 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d020      	beq.n	80011dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01b      	beq.n	80011dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f06f 0204 	mvn.w	r2, #4
 80011ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2202      	movs	r2, #2
 80011b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f8ed 	bl	80013a2 <HAL_TIM_IC_CaptureCallback>
 80011c8:	e005      	b.n	80011d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f8e0 	bl	8001390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f8ef 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d020      	beq.n	8001228 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01b      	beq.n	8001228 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f06f 0208 	mvn.w	r2, #8
 80011f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2204      	movs	r2, #4
 80011fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f8c7 	bl	80013a2 <HAL_TIM_IC_CaptureCallback>
 8001214:	e005      	b.n	8001222 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f8ba 	bl	8001390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f8c9 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	d020      	beq.n	8001274 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01b      	beq.n	8001274 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f06f 0210 	mvn.w	r2, #16
 8001244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2208      	movs	r2, #8
 800124a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f8a1 	bl	80013a2 <HAL_TIM_IC_CaptureCallback>
 8001260:	e005      	b.n	800126e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f894 	bl	8001390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f8a3 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0201 	mvn.w	r2, #1
 8001290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fcea 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00c      	beq.n	80012bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80012b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fa71 	bl	800179e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00c      	beq.n	80012e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80012d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f873 	bl	80013c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00c      	beq.n	8001304 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f06f 0220 	mvn.w	r2, #32
 80012fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fa44 	bl	800178c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001320:	2302      	movs	r3, #2
 8001322:	e031      	b.n	8001388 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f8bc 	bl	80014b4 <TIM_SlaveTimer_SetConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e018      	b.n	8001388 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001364:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001374:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a2f      	ldr	r2, [pc, #188]	@ (80014a8 <TIM_Base_SetConfig+0xd0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d00b      	beq.n	8001408 <TIM_Base_SetConfig+0x30>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f6:	d007      	beq.n	8001408 <TIM_Base_SetConfig+0x30>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a2c      	ldr	r2, [pc, #176]	@ (80014ac <TIM_Base_SetConfig+0xd4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d003      	beq.n	8001408 <TIM_Base_SetConfig+0x30>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a2b      	ldr	r2, [pc, #172]	@ (80014b0 <TIM_Base_SetConfig+0xd8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d108      	bne.n	800141a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800140e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a22      	ldr	r2, [pc, #136]	@ (80014a8 <TIM_Base_SetConfig+0xd0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00b      	beq.n	800143a <TIM_Base_SetConfig+0x62>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001428:	d007      	beq.n	800143a <TIM_Base_SetConfig+0x62>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1f      	ldr	r2, [pc, #124]	@ (80014ac <TIM_Base_SetConfig+0xd4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d003      	beq.n	800143a <TIM_Base_SetConfig+0x62>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <TIM_Base_SetConfig+0xd8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d108      	bne.n	800144c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <TIM_Base_SetConfig+0xd0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d103      	bne.n	8001480 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f023 0201 	bic.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
  }
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40012c00 	.word	0x40012c00
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40000800 	.word	0x40000800

080014b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014d0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f023 0307 	bic.w	r3, r3, #7
 80014e2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b70      	cmp	r3, #112	@ 0x70
 80014fc:	d01a      	beq.n	8001534 <TIM_SlaveTimer_SetConfig+0x80>
 80014fe:	2b70      	cmp	r3, #112	@ 0x70
 8001500:	d860      	bhi.n	80015c4 <TIM_SlaveTimer_SetConfig+0x110>
 8001502:	2b60      	cmp	r3, #96	@ 0x60
 8001504:	d054      	beq.n	80015b0 <TIM_SlaveTimer_SetConfig+0xfc>
 8001506:	2b60      	cmp	r3, #96	@ 0x60
 8001508:	d85c      	bhi.n	80015c4 <TIM_SlaveTimer_SetConfig+0x110>
 800150a:	2b50      	cmp	r3, #80	@ 0x50
 800150c:	d046      	beq.n	800159c <TIM_SlaveTimer_SetConfig+0xe8>
 800150e:	2b50      	cmp	r3, #80	@ 0x50
 8001510:	d858      	bhi.n	80015c4 <TIM_SlaveTimer_SetConfig+0x110>
 8001512:	2b40      	cmp	r3, #64	@ 0x40
 8001514:	d019      	beq.n	800154a <TIM_SlaveTimer_SetConfig+0x96>
 8001516:	2b40      	cmp	r3, #64	@ 0x40
 8001518:	d854      	bhi.n	80015c4 <TIM_SlaveTimer_SetConfig+0x110>
 800151a:	2b30      	cmp	r3, #48	@ 0x30
 800151c:	d055      	beq.n	80015ca <TIM_SlaveTimer_SetConfig+0x116>
 800151e:	2b30      	cmp	r3, #48	@ 0x30
 8001520:	d850      	bhi.n	80015c4 <TIM_SlaveTimer_SetConfig+0x110>
 8001522:	2b20      	cmp	r3, #32
 8001524:	d051      	beq.n	80015ca <TIM_SlaveTimer_SetConfig+0x116>
 8001526:	2b20      	cmp	r3, #32
 8001528:	d84c      	bhi.n	80015c4 <TIM_SlaveTimer_SetConfig+0x110>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d04d      	beq.n	80015ca <TIM_SlaveTimer_SetConfig+0x116>
 800152e:	2b10      	cmp	r3, #16
 8001530:	d04b      	beq.n	80015ca <TIM_SlaveTimer_SetConfig+0x116>
 8001532:	e047      	b.n	80015c4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001544:	f000 f8a4 	bl	8001690 <TIM_ETR_SetConfig>
      break;
 8001548:	e040      	b.n	80015cc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d101      	bne.n	8001556 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e03b      	b.n	80015ce <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800157c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	4313      	orrs	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	621a      	str	r2, [r3, #32]
      break;
 800159a:	e017      	b.n	80015cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015a8:	461a      	mov	r2, r3
 80015aa:	f000 f814 	bl	80015d6 <TIM_TI1_ConfigInputStage>
      break;
 80015ae:	e00d      	b.n	80015cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015bc:	461a      	mov	r2, r3
 80015be:	f000 f838 	bl	8001632 <TIM_TI2_ConfigInputStage>
      break;
 80015c2:	e003      	b.n	80015cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	75fb      	strb	r3, [r7, #23]
      break;
 80015c8:	e000      	b.n	80015cc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80015ca:	bf00      	nop
  }

  return status;
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b087      	sub	sp, #28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f023 0201 	bic.w	r2, r3, #1
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f023 030a 	bic.w	r3, r3, #10
 8001612:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4313      	orrs	r3, r2
 800161a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	621a      	str	r2, [r3, #32]
}
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001632:	b480      	push	{r7}
 8001634:	b087      	sub	sp, #28
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f023 0210 	bic.w	r2, r3, #16
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800165c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	031b      	lsls	r3, r3, #12
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800166e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	621a      	str	r2, [r3, #32]
}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80016aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	021a      	lsls	r2, r3, #8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	609a      	str	r2, [r3, #8]
}
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e046      	b.n	8001776 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800170e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00e      	beq.n	800174a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001734:	d009      	beq.n	800174a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d004      	beq.n	800174a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10c      	bne.n	8001764 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4313      	orrs	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40012c00 	.word	0x40012c00
 8001784:	40000400 	.word	0x40000400
 8001788:	40000800 	.word	0x40000800

0800178c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4a14      	ldr	r2, [pc, #80]	@ (800180c <HAL_MspInit+0x5c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6193      	str	r3, [r2, #24]
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_MspInit+0x5c>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_MspInit+0x5c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_MspInit+0x5c>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_MspInit+0x60>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_MspInit+0x60>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f7fe fcde 	bl	8000224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <TIM3_IRQHandler+0x10>)
 8001872:	f7ff fc5b 	bl	800112c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000044 	.word	0x20000044

08001880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <gpioInit>:
#ifdef _USE_HW_CLI
static void cliGpio(cli_args_t *args);
#endif

bool gpioInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
  bool ret = true;
 8001892:	2301      	movs	r3, #1
 8001894:	74fb      	strb	r3, [r7, #19]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <gpioInit+0x98>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a22      	ldr	r2, [pc, #136]	@ (8001924 <gpioInit+0x98>)
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <gpioInit+0x98>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <gpioInit+0x98>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001924 <gpioInit+0x98>)
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	6193      	str	r3, [r2, #24]
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <gpioInit+0x98>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <gpioInit+0x98>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a16      	ldr	r2, [pc, #88]	@ (8001924 <gpioInit+0x98>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <gpioInit+0x98>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);


  for (int i=0; i<GPIO_MAX_CH; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e017      	b.n	8001914 <gpioInit+0x88>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	490f      	ldr	r1, [pc, #60]	@ (8001928 <gpioInit+0x9c>)
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	3308      	adds	r3, #8
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	f000 f816 	bl	800192c <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2201      	movs	r2, #1
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f895 	bl	8001a38 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	dde4      	ble.n	80018e4 <gpioInit+0x58>
  cliAdd("gpio", cliGpio);
#endif
#ifdef _USE_HW_LOG
  logPrintf("[%s] gpio_Init()\r\n", ret ? "OK":"NG");
#endif
  return ret;
 800191a:	7cfb      	ldrb	r3, [r7, #19]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	08001e80 	.word	0x08001e80

0800192c <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 800193c:	2301      	movs	r3, #1
 800193e:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]


  if (ch >= GPIO_MAX_CH)
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <gpioPinMode+0x2c>
  {
    return false;
 8001954:	2300      	movs	r3, #0
 8001956:	e067      	b.n	8001a28 <gpioPinMode+0xfc>
  }

  switch(mode)
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	2b08      	cmp	r3, #8
 800195c:	d84b      	bhi.n	80019f6 <gpioPinMode+0xca>
 800195e:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <gpioPinMode+0x38>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	08001989 	.word	0x08001989
 8001968:	08001993 	.word	0x08001993
 800196c:	080019a1 	.word	0x080019a1
 8001970:	080019ab 	.word	0x080019ab
 8001974:	080019b9 	.word	0x080019b9
 8001978:	080019c7 	.word	0x080019c7
 800197c:	080019d5 	.word	0x080019d5
 8001980:	080019df 	.word	0x080019df
 8001984:	080019ed 	.word	0x080019ed
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
      break;
 8001990:	e031      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001996:	2301      	movs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	61bb      	str	r3, [r7, #24]
      break;
 800199e:	e02a      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019a4:	2302      	movs	r3, #2
 80019a6:	617b      	str	r3, [r7, #20]
      break;
 80019a8:	e025      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_INPUT_IT_RISING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019aa:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <gpioPinMode+0x104>)
 80019ac:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61bb      	str	r3, [r7, #24]
      break;
 80019b6:	e01e      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	61bb      	str	r3, [r7, #24]
      break;
 80019c4:	e017      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	61bb      	str	r3, [r7, #24]
      break;
 80019d2:	e010      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019d8:	2302      	movs	r3, #2
 80019da:	617b      	str	r3, [r7, #20]
      break;
 80019dc:	e00b      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
      break;
 80019ea:	e004      	b.n	80019f6 <gpioPinMode+0xca>

    case _DEF_INPUT_ANALOG:
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ec:	2303      	movs	r3, #3
 80019ee:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
      break;
 80019f4:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	490e      	ldr	r1, [pc, #56]	@ (8001a34 <gpioPinMode+0x108>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3304      	adds	r3, #4
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	4909      	ldr	r1, [pc, #36]	@ (8001a34 <gpioPinMode+0x108>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f107 020c 	add.w	r2, r7, #12
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd4d 	bl	80004c0 <HAL_GPIO_Init>

  return ret;
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	10110000 	.word	0x10110000
 8001a34:	08001e80 	.word	0x08001e80

08001a38 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460a      	mov	r2, r1
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	4613      	mov	r3, r2
 8001a46:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d140      	bne.n	8001ad0 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 8001a4e:	79bb      	ldrb	r3, [r7, #6]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01e      	beq.n	8001a92 <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	4920      	ldr	r1, [pc, #128]	@ (8001ad8 <gpioPinWrite+0xa0>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	79fa      	ldrb	r2, [r7, #7]
 8001a66:	491c      	ldr	r1, [pc, #112]	@ (8001ad8 <gpioPinWrite+0xa0>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b299      	uxth	r1, r3
 8001a78:	79fa      	ldrb	r2, [r7, #7]
 8001a7a:	4c17      	ldr	r4, [pc, #92]	@ (8001ad8 <gpioPinWrite+0xa0>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4423      	add	r3, r4
 8001a86:	3309      	adds	r3, #9
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f7fe fe9c 	bl	80007c8 <HAL_GPIO_WritePin>
 8001a90:	e01f      	b.n	8001ad2 <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	4910      	ldr	r1, [pc, #64]	@ (8001ad8 <gpioPinWrite+0xa0>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <gpioPinWrite+0xa0>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	4c07      	ldr	r4, [pc, #28]	@ (8001ad8 <gpioPinWrite+0xa0>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4423      	add	r3, r4
 8001ac4:	330a      	adds	r3, #10
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f7fe fe7d 	bl	80007c8 <HAL_GPIO_WritePin>
 8001ace:	e000      	b.n	8001ad2 <gpioPinWrite+0x9a>
    return;
 8001ad0:	bf00      	nop
  }
}
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	08001e80 	.word	0x08001e80

08001adc <gpioPinToggle>:

  return ret;
}

void gpioPinToggle(uint8_t ch)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if (ch >= GPIO_MAX_CH)
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <gpioPinToggle+0x3c>
  {
    return;
  }

  HAL_GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	490c      	ldr	r1, [pc, #48]	@ (8001b20 <gpioPinToggle+0x44>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	79fa      	ldrb	r2, [r7, #7]
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <gpioPinToggle+0x44>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7fe fe71 	bl	80007f8 <HAL_GPIO_TogglePin>
 8001b16:	e000      	b.n	8001b1a <gpioPinToggle+0x3e>
    return;
 8001b18:	bf00      	nop
}
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	08001e80 	.word	0x08001e80

08001b24 <tim_Init>:
static void cliTimer(cli_args_t *args);
#endif


void tim_Init(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
  for (int i=0; i<HW_TIM_MAX_CH; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e015      	b.n	8001b5c <tim_Init+0x38>
  {
    tim_tbl[i].is_start = false;
 8001b30:	490f      	ldr	r1, [pc, #60]	@ (8001b70 <tim_Init+0x4c>)
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
    tim_tbl[i].func_cb  = NULL;
 8001b42:	490b      	ldr	r1, [pc, #44]	@ (8001b70 <tim_Init+0x4c>)
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3304      	adds	r3, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
  for (int i=0; i<HW_TIM_MAX_CH; i++)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	dde6      	ble.n	8001b30 <tim_Init+0xc>
  }
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	2000002c 	.word	0x2000002c

08001b74 <timBegin>:

bool timBegin(uint8_t ch)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tim_t *p_tim = &tim_tbl[ch];
 8001b84:	79fa      	ldrb	r2, [r7, #7]
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4a34      	ldr	r2, [pc, #208]	@ (8001c60 <timBegin+0xec>)
 8001b90:	4413      	add	r3, r2
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]

  switch(ch)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d14b      	bne.n	8001c4c <timBegin+0xd8>
  {
    case _DEF_TIM3:
      p_tim->h_tim = &htim3;
 8001bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <timBegin+0xf0>)
 8001bb8:	609a      	str	r2, [r3, #8]
      p_tim->func_cb = NULL;
 8001bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]

      htim3.Instance = TIM3;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <timBegin+0xf0>)
 8001bc2:	4a29      	ldr	r2, [pc, #164]	@ (8001c68 <timBegin+0xf4>)
 8001bc4:	601a      	str	r2, [r3, #0]
      htim3.Init.Prescaler = 71;
 8001bc6:	4b27      	ldr	r3, [pc, #156]	@ (8001c64 <timBegin+0xf0>)
 8001bc8:	2247      	movs	r2, #71	@ 0x47
 8001bca:	605a      	str	r2, [r3, #4]
      htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <timBegin+0xf0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
      htim3.Init.Period = 65535;
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <timBegin+0xf0>)
 8001bd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd8:	60da      	str	r2, [r3, #12]
      htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bda:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <timBegin+0xf0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
      htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <timBegin+0xf0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
      if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be6:	481f      	ldr	r0, [pc, #124]	@ (8001c64 <timBegin+0xf0>)
 8001be8:	f7ff f9fe 	bl	8000fe8 <HAL_TIM_Base_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <timBegin+0x82>
      {
        Error_Handler();
 8001bf2:	f000 f8f4 	bl	8001dde <Error_Handler>
      }
      sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	617b      	str	r3, [r7, #20]
       sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
       if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4817      	ldr	r0, [pc, #92]	@ (8001c64 <timBegin+0xf0>)
 8001c06:	f7ff fb81 	bl	800130c <HAL_TIM_SlaveConfigSynchro>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <timBegin+0xa0>
       {
         Error_Handler();
 8001c10:	f000 f8e5 	bl	8001dde <Error_Handler>
       }
       sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
       sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
       if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	4810      	ldr	r0, [pc, #64]	@ (8001c64 <timBegin+0xf0>)
 8001c24:	f7ff fd54 	bl	80016d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <timBegin+0xbe>
       {
         Error_Handler();
 8001c2e:	f000 f8d6 	bl	8001dde <Error_Handler>
       }
      if (HAL_TIM_Base_Start_IT(&htim3) == HAL_OK)
 8001c32:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <timBegin+0xf0>)
 8001c34:	f7ff fa28 	bl	8001088 <HAL_TIM_Base_Start_IT>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d108      	bne.n	8001c50 <timBegin+0xdc>
      {
        p_tim->is_start = true;
 8001c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        ret = true;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
      //logPrintf("[%s] tim5_Init()\r\n", ret ? "OK":"NG");
      break;
 8001c4a:	e001      	b.n	8001c50 <timBegin+0xdc>

    default:
      break;
 8001c4c:	bf00      	nop
 8001c4e:	e000      	b.n	8001c52 <timBegin+0xde>
      break;
 8001c50:	bf00      	nop
  }
  #ifdef _USE_HW_CLI
    cliAdd("timer", cliTimer);
  #endif

  return ret;
 8001c52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3730      	adds	r7, #48	@ 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000002c 	.word	0x2000002c
 8001c64:	20000044 	.word	0x20000044
 8001c68:	40000400 	.word	0x40000400

08001c6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  tim_t *p_tim;
  for(uint8_t i = 0; i<HW_TIM_MAX_CH; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e01f      	b.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x4e>
  {
      if (htim->Instance == tim_tbl[i].h_tim->Instance)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	4812      	ldr	r0, [pc, #72]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4403      	add	r3, r0
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4299      	cmp	r1, r3
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x48>
      {
        p_tim = &tim_tbl[i];
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60bb      	str	r3, [r7, #8]
        if (p_tim->func_cb != NULL)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x48>
        {
          (*p_tim->func_cb)();
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4798      	blx	r3
  for(uint8_t i = 0; i<HW_TIM_MAX_CH; i++)
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d9dc      	bls.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0xe>
        }
      }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000002c 	.word	0x2000002c

08001cd0 <HAL_TIM_Base_MspInit>:

  p_tim->func_cb = func;
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	if(tim_baseHandle->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <HAL_TIM_Base_MspInit+0x44>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d113      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x3a>
	{
	/* USER CODE BEGIN TIM3_MspInit 0 */

	/* USER CODE END TIM3_MspInit 0 */
	/* TIM3 clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

	/* TIM3 interrupt Init */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201d      	movs	r0, #29
 8001d00:	f7fe fba7 	bl	8000452 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d04:	201d      	movs	r0, #29
 8001d06:	f7fe fbc0 	bl	800048a <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM3_MspInit 1 */

	/* USER CODE END TIM3_MspInit 1 */
	}
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40021000 	.word	0x40021000

08001d1c <main>:

void hwInit(void);
void SystemClock_Config(void);

int main(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d20:	f7fe fa3a 	bl	8000198 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001d24:	f000 f816 	bl	8001d54 <SystemClock_Config>

  /* Initialize all configured peripherals */
  hwInit();
 8001d28:	f000 f809 	bl	8001d3e <hwInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  gpioPinToggle(LED);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fed5 	bl	8001adc <gpioPinToggle>
	  HAL_Delay(500);
 8001d32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d36:	f7fe fa91 	bl	800025c <HAL_Delay>
	  gpioPinToggle(LED);
 8001d3a:	bf00      	nop
 8001d3c:	e7f6      	b.n	8001d2c <main+0x10>

08001d3e <hwInit>:
  }
  /* USER CODE END 3 */
}

void hwInit(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
//  cliInit();
//  logInit();
//  logOpen(HW_LOG_CH, 115200);
//  logPrintf("\r\n[ Firmware Begin... ]\r\n");

  tim_Init();
 8001d42:	f7ff feef 	bl	8001b24 <tim_Init>
  timBegin(_DEF_TIM3);
 8001d46:	2002      	movs	r0, #2
 8001d48:	f7ff ff14 	bl	8001b74 <timBegin>
  gpioInit();
 8001d4c:	f7ff fd9e 	bl	800188c <gpioInit>
//    fatfsInit();
//  }

//  cliOpen(_DEF_USB, 115200);
//  uartOpen(_DEF_UART3, 115200);
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b090      	sub	sp, #64	@ 0x40
 8001d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5a:	f107 0318 	add.w	r3, r7, #24
 8001d5e:	2228      	movs	r2, #40	@ 0x28
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f841 	bl	8001dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d92:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fd45 	bl	800082c <HAL_RCC_OscConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001da8:	f000 f819 	bl	8001dde <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dac:	230f      	movs	r3, #15
 8001dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db0:	2302      	movs	r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ffb2 	bl	8000d30 <HAL_RCC_ClockConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dd2:	f000 f804 	bl	8001dde <Error_Handler>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3740      	adds	r7, #64	@ 0x40
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de2:	b672      	cpsid	i
}
 8001de4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de6:	bf00      	nop
 8001de8:	e7fd      	b.n	8001de6 <Error_Handler+0x8>

08001dea <memset>:
 8001dea:	4603      	mov	r3, r0
 8001dec:	4402      	add	r2, r0
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d100      	bne.n	8001df4 <memset+0xa>
 8001df2:	4770      	bx	lr
 8001df4:	f803 1b01 	strb.w	r1, [r3], #1
 8001df8:	e7f9      	b.n	8001dee <memset+0x4>
	...

08001dfc <__libc_init_array>:
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	2600      	movs	r6, #0
 8001e00:	4d0c      	ldr	r5, [pc, #48]	@ (8001e34 <__libc_init_array+0x38>)
 8001e02:	4c0d      	ldr	r4, [pc, #52]	@ (8001e38 <__libc_init_array+0x3c>)
 8001e04:	1b64      	subs	r4, r4, r5
 8001e06:	10a4      	asrs	r4, r4, #2
 8001e08:	42a6      	cmp	r6, r4
 8001e0a:	d109      	bne.n	8001e20 <__libc_init_array+0x24>
 8001e0c:	f000 f81a 	bl	8001e44 <_init>
 8001e10:	2600      	movs	r6, #0
 8001e12:	4d0a      	ldr	r5, [pc, #40]	@ (8001e3c <__libc_init_array+0x40>)
 8001e14:	4c0a      	ldr	r4, [pc, #40]	@ (8001e40 <__libc_init_array+0x44>)
 8001e16:	1b64      	subs	r4, r4, r5
 8001e18:	10a4      	asrs	r4, r4, #2
 8001e1a:	42a6      	cmp	r6, r4
 8001e1c:	d105      	bne.n	8001e2a <__libc_init_array+0x2e>
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
 8001e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e24:	4798      	blx	r3
 8001e26:	3601      	adds	r6, #1
 8001e28:	e7ee      	b.n	8001e08 <__libc_init_array+0xc>
 8001e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2e:	4798      	blx	r3
 8001e30:	3601      	adds	r6, #1
 8001e32:	e7f2      	b.n	8001e1a <__libc_init_array+0x1e>
 8001e34:	08001e8c 	.word	0x08001e8c
 8001e38:	08001e8c 	.word	0x08001e8c
 8001e3c:	08001e8c 	.word	0x08001e8c
 8001e40:	08001e90 	.word	0x08001e90

08001e44 <_init>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr

08001e50 <_fini>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	bf00      	nop
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr
